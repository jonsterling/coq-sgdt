
(*

(* A functor to add support for store. *)
Module AddStore.
  Module Ob.
    Context (A : 𝒞+).
    Definition


(* TODO: factor all this through some smaller functors. *)
Module LeftAdjunctive.
  Section LeftAdjunctive.
    Context (A : 𝒞+) (E : itree.Thy).

    Definition ob_inner (w : 𝒲) : Set :=
      ⋁ w' : 𝒲, @hom 𝒲 w w' × (heap w' × A w').

    Definition ob (w : 𝒲) : itree.Alg.type E :=
      itree.ITree_alg E (ob_inner w).

    Definition rst_inner (w1 w2 : 𝒲) (w12 : @hom 𝒲 w1 w2) : ob_inner w2 -> ob_inner w1.
    Proof.
      apply: Reflection.map.
      case=> w2' [w2w2' [h u]].
      exists w2'; do ? split.
      - exact: (w12 >> w2w2').
      - exact: h.
      - exact: u.
    Defined.

    Definition rst (w1 w2 : 𝒲) (w12 : @hom 𝒲 w1 w2) : itree.AlgHom.type (ob w2) (ob w1).
    Proof. by apply/itree.map/rst_inner/w12. Defined.

    Definition prefunctor_mixin : Prefunctor.mixin_of (𝒲^op) (itree.ALG.cat E) ob.
    Proof. by build=> w1 w2 w12; apply: rst. Defined.

    Canonical prefunctor : Prefunctor.type (𝒲^op) (itree.ALG.cat E).
    Proof. by esplit; apply: prefunctor_mixin. Defined.

    Lemma functor_mixin : Functor.mixin_of _ _ prefunctor.
    Proof.
      build.
      - move=> w.
        unshelve apply: itree.extends_unique.
        + apply: itree.η.
        + move=> p.
          rewrite //= itree.ext_extends.
          congr itree.η.
          move: p.
          apply: unfunE.
          rewrite -Reflection.map_id.
          congr Reflection.map.
          apply: funE=> ?.
          apply: sigE=> //=.
          apply: prodE=> //=.
          by rewrite (@seqL 𝒲).
        + move=> p.
          by rewrite //= itree.ext_extends.
      - move=> w1 w2 w3 w12 w23.
        unshelve apply: itree.extends_unique.
        + move=> p.
          apply: itree.η.
          apply: rst_inner p.
          by exact: (w12 >> w23).
        + move=> p.
          rewrite //= itree.ext_extends.
          congr itree.η.
        + move=> p.
          rewrite //= ?itree.ext_extends.
          congr itree.η.
          move: p.
          apply: unfunE.
          rewrite (_ : (fun x : ob_inner w1 => rst_inner w3 w2 w23 (rst_inner w2 w1 w12 x)) = (rst_inner w3 w2 w23 \o rst_inner w2 w1 w12)); last by [].
          rewrite -Reflection.map_cmp.
          congr Reflection.map.
          apply: funE=> p.
          apply: sigE=>//=.
          apply: prodE=>//=.
          by rewrite (@seqA 𝒲).
    Qed.


  End LeftAdjunctive.
End LeftAdjunctive.


(*



    Canonical prefunctor : Prefunctor.type (𝒲^op) SET.cat.
    Proof. by esplit; apply: prefunctor_mixin. Defined.

    Lemma functor_mixin : Functor.mixin_of _ _ prefunctor.
    Proof.
      build.
      - move=> w; cbn.
        rewrite -Reflection.map_id.
        congr Reflection.map.
        apply: funE=> p.
        apply: sigE=> //=.
        apply: prodE=> //=.
        apply: (@seqR (𝒲^op)).
      - move=> w1 w2 w3 w12 w23; cbn.
        rewrite -Reflection.map_cmp.
        congr Reflection.map.
        apply: funE=> p.
        apply: sigE=> //=.
        apply: prodE=> //=.
        apply: (@seqA (𝒲^op)).
    Qed.

    Canonical functor : Functor.type (𝒲^op) SET.cat.
    Proof. esplit; apply: functor_mixin. Defined.

    Definition T : 𝒞-[E] := functor.
  End LeftAdjunctive.
End LeftAdjunctive.

Module RightAdjunctive.
  Section RightAdjunctive.
    Context (X : 𝒞-) (E : itree.Thy).

    Definition ob (w : 𝒲^op) : Set :=
      ⋀ w' : 𝒲, @hom 𝒲 w w' -> heap w' -> itree.ITree E (X w').

    Definition rst (w1 w2 : 𝒲^op) (w12 : @hom (𝒲^op) w1 w2) : ob w2 -> ob w1.
    Proof.
      move=> p w2' w2w2' h.
      apply: p.
      - by exact: (@seq 𝒲 _ _ _ w12 w2w2').
      - by exact: h.
    Defined.

    Definition prefunctor_mixin : Prefunctor.mixin_of 𝒲 SET.cat ob.
    Proof. by build=> w1 w2 w12; apply: rst. Defined.

    Canonical prefunctor : Prefunctor.type 𝒲 SET.cat.
    Proof. by esplit; apply: prefunctor_mixin. Defined.

    Definition functor_mixin : Functor.mixin_of _ _ prefunctor.
    Proof.
      build.
      - move=> w.
        apply: funE=> //= p; cbn.
        apply: dfunE=> w'.
        apply: funE=> ww'.
        apply: funE=> h.
        by rewrite /rst seqL.
      - move=> w1 w2 w3 w12 w23.
        apply: funE=> //= p; cbn.
        apply: dfunE=> w3'.
        apply: funE=> w3w3'.
        apply: funE=> h.
        by rewrite /rst (@seqA 𝒲 _ _ _ _ w12 w23 w3w3').
    Qed.

    Canonical functor : Functor.type 𝒲 SET.cat.
    Proof. esplit; apply: functor_mixin. Defined.

    Definition T : 𝒞+ := functor.
  End RightAdjunctive.
End RightAdjunctive.



Module LeftAdjoint.
  Section LeftAdjoint.
    Context (E : itree.Thy).

    Definition ob (A : 𝒞+) : 𝒞- :=
      LeftAdjunctive.T A E.

    Definition map_el (A B : 𝒞+) (f : A ~> B) : forall w, ob A w -> ob B w.
    Proof.
      move=> w.
      apply: Reflection.map.
      case=> w' [ww' [h u]].
      exists w', ww', h; move: u.
      by apply/itree.map/f.
    Defined.

    Definition map (A B : 𝒞+) (f : A ~> B) : ob A ~> ob B.
    Proof.
      build.
      - by apply: map_el.
      - abstract by
          build=> w w' ww';
          cbn; rewrite -?Reflection.map_cmp;
          congr Reflection.map.
    Defined.

    Definition prefunctor_mixin : Prefunctor.mixin_of 𝒞+ 𝒞- ob.
    Proof. by build; apply: map. Defined.

    Canonical prefunctor : Prefunctor.type 𝒞+ 𝒞-.
    Proof. by esplit; apply: prefunctor_mixin. Defined.

    Definition functor_mixin : Functor.mixin_of _ _ prefunctor.
    Proof.
      build.
      - move=> A.
        apply: NatTrans.ext.
        apply: dfunE=> w.
        cbn; rewrite -Reflection.map_id.
        congr Reflection.map.
        apply: funE=> //= ?.
        by rewrite itree.map_id.
      - move=> A B C f g.
        apply: NatTrans.ext.
        apply: dfunE=> w.
        cbn; rewrite -Reflection.map_cmp.
        congr Reflection.map.
        apply: funE=> //= ?.
        by rewrite itree.map_cmp.
    Qed.

    Canonical functor : Functor.type 𝒞+ 𝒞-.
    Proof. by esplit; apply: functor_mixin. Defined.
  End LeftAdjoint.
End LeftAdjoint.

*)


(*

Module RightAdjoint.
  Section RightAdjoint.
    Context (E : itree.Thy).

    Definition ob (X : 𝒞-) : 𝒞+ :=
      RightAdjunctive.T X E.

    Definition map_el (X Y : 𝒞-) (f : X ~> Y) : forall w, ob X w -> ob Y w.
    Proof.
      move=> w p w' ww' h.
      move: (p w' ww' h).
      by apply/itree.map/f.
    Defined.

    Definition map (X Y : 𝒞-) (f : X ~> Y) : ob X ~> ob Y.
    Proof.
      build.
      - by apply: map_el.
      - abstract by [].
    Defined.


    Definition prefunctor_mixin : Prefunctor.mixin_of 𝒞- 𝒞+ ob.
    Proof. by build; apply: map. Defined.

    Canonical prefunctor : Prefunctor.type 𝒞- 𝒞+.
    Proof. by esplit; apply: prefunctor_mixin. Defined.

    Definition functor_mixin : Functor.mixin_of _ _ prefunctor.
    Proof.
      build.
      - move=> X.
        apply: NatTrans.ext.
        apply: dfunE=> w; cbn.
        apply: funE=> p.
        apply: dfunE=> w'.
        apply: funE=> ww'.
        apply: funE=> h.
        by rewrite /map_el itree.map_id.
      - move=> X Y Z f g.

*)


*)

